@startuml

package "data_preparation" {
    package processor {
        class DatasetProperties {
            + features : List<String>
            + categorical_features : List<String>
            + numeric_features : List<String>
            + labels : List<String> <<optional>>
            + benign_label : String <<optional>>

            + DatasetProperties(features: List[str], categorical_features: List[str], labels: Optional<List[str]>, benign_label: Optional<str>) : void
        }

        class Processor {
            - properties : DatasetProperties
            - df : DataFrame
            - transformations : List<Callable>
            - label_mapping : Map<Any, int>

            + Processor(dataset_path: str, properties: DatasetProperties, label_conversion: bool) : void
            - _load_df(dataset_path: str) : DataFrame
            - _label_conversion() : DataFrame
            + add_step(transform_function: Callable, order: int) : Callable
            + fit() : Tuple<DataFrame, DataFrame>
        }
    }

    package transformation_builder {
        class TransformationBuilder {
            - transformations : List<Callable>

            + TransformationBuilder() : void
            + add_step(transform_function: Callable, order: int) : Callable
            + build() : List<Callable>
        }
    }

    package random_sw_sampler {
        class RandomSlidingWindowSampler {
            + dataset : Dataset
            + window_size : int
            + num_samples : int

            + RandomSlidingWindowSampler(dataset: Dataset, window_size: int) : void
            + __len__() : int
            + __iter__() : Iterator
        }
    }

    package tabular_dataset {
        class TabularDataset {
            + numeric_data : Tensor
            + categorical_data : Tensor
            + labels : Tensor
            - numeric_transformation : Compose
            - categorical_transformation : Compose
            - labels_transformation : Compose
            - stats : Map<String, Tensor>

            + TabularDataset(numeric_data: DataFrame, categorical_data: DataFrame, labels: Optional<DataFrame>) : void
            + get_numeric_transformation() : Compose
            + set_numeric_transformation(List<Callable>) : void
            + get_categorical_transformation() : Compose
            + set_categorical_transformation(List<Callable>) : void
            + get_labels_transformation : Compose
            + set_labels_transformation(List<Callable>) : void
            + __len__() : int
            + __getitem__(idx: List<int>) : Tuple<Tensor, Tensor>
        }
    }
}

package torch.utils.data {
    abstract class Sampler {
        {abstract} + __len__() : int
        {abstract} + __iter__() : Iterator
    }

    abstract class Dataset {
        {abstract} + __len__() : int
        {abstract} + __getitem__(idx: List<int>) : Tuple<Tensor, Tensor>
    }
}

Processor --> DatasetProperties : properties
torch.utils.data.Sampler <|-- data_preparation.random_sw_sampler.RandomSlidingWindowSampler
torch.utils.data.Dataset <|-- data_preparation.tabular_dataset.TabularDataset

@enduml